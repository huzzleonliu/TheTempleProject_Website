services:
  frontend:
    container_name: tp_frontend  # 容器名称
    build: 
      context: ./frontend  # 前端 Dockerfile 目录
      dockerfile: Dockerfile.prod  # 使用生产环境的 Dockerfile
    networks:
      - the_temple_project_net
    expose:
      - "80"

  frontend_dev:
    container_name: tp_frontend_dev  # 容器名称
    build: 
      context: ./frontend  # 前端 Dockerfile 目录
      dockerfile: Dockerfile.dev  # 使用开发环境的 Dockerfile
    networks:
      - the_temple_project_net
    expose:
      - "80"
    ports:
      - "8081:80"  # 映射端口到宿主机
    volumes:
      - type: bind
        source: ./frontend
        target: /app  

  backend:
    container_name: tp_backend  # 容器名称
    build: ./backend  # 后端 Dockerfile 目录
    networks:
      - the_temple_project_net
    environment:
      - PORT=80
    expose:
      - "80"
    depends_on:
      - database  # 确保数据库容器先启动

  database:
    container_name: tp_database
    build: ./database  
    networks:
      - the_temple_project_net
    expose:
      - "5432"
    ports:
      - "5433:5432"  # 映射端口到宿主机

  resource:
    container_name: tp_resource  # 容器名称
    build: ./resource  # 资源服务 Dockerfile 目录
    networks:
      - the_temple_project_net
    environment:
      - PORT=80
    expose:
      - "80"
    volumes:
      - type: bind
        source: ./resource/resource
        target: /resource  # 挂载资源服务目录

  nginx:
    container_name: tp_nginx  # 容器名称
    build: ./nginx  # Dockerfile 所在目录
    ports:
      - "8080:80"
    networks:
      - the_temple_project_net
    depends_on:
      - frontend
      - backend
      - resource  # 确保前端、后端和资源服务先启动
    volumes:
      - type: bind
        source: ./nginx/nginx/
        target: /etc/nginx/ # 挂载 Nginx 配置文件目录

networks:
  the_temple_project_net:  # 自定义网络确保容器间通过名称通信
